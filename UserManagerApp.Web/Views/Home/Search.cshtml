@using UserManagerApp.Web.DTOs
@model PaginatedUserDTO

@{
    ViewData["Title"] = "Gestión de Usuarios";
    var genders = ViewBag.Genders as List<GenderDTO>;
}

<h1 class="mb-4">Lista de usuarios</h1>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}
@if (TempData["Success"] != null)
{
    <div class="alert alert-success">@TempData["Success"]</div>
}

@if (Model.Users != null && Model.Users.Any())
{
    <table class="table table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Fecha de nacimiento</th>
                <th>Género</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Users)
            {
                <tr id="row-@user.IdUser">
                    <td>@user.IdUser</td>
                    <td>
                        <span class="display-span" id="span-name-@user.IdUser">@user.NameUser</span>
                        <input type="text" class="form-control form-control-sm edit-input d-none"
                               id="input-name-@user.IdUser" value="@user.NameUser" />
                    </td>
                    <td>
                        <span class="display-span" id="span-birth-@user.IdUser">@user.BirthDate.ToString("yyyy-MM-dd")</span>
                        <input type="date" class="form-control form-control-sm edit-input d-none"
                               id="input-birth-@user.IdUser" value="@user.BirthDate.ToString("yyyy-MM-dd")" />
                    </td>
                    <td>
                        <span class="display-span" id="span-gender-@user.IdUser" data-gender-id="@user.GenderId">
                            @(genders.FirstOrDefault(g => g.IdGender == user.GenderId)?.Gender ?? "Sin género")
                        </span>

                        <select class="form-control form-control-sm edit-input d-none" id="select-gender-@user.IdUser">
                            <option value="">Seleccione género</option>
                            @foreach (var gender in genders)
                            {
                                <option value="@gender.IdGender" selected="@(user.GenderId == gender.IdGender)">
                                    @gender.Gender
                                </option>
                            }
                        </select>
                    </td>
                    <td>
                        <button class="btn btn-primary btn-sm" id="btn-edit-@user.IdUser" onclick="enableEdit(@user.IdUser)">
                            Editar
                        </button>

                        <button class="btn btn-danger btn-sm" id="btn-delete-@user.IdUser" onclick="confirmDelete(@user.IdUser)">
                            Eliminar
                        </button>

                        <button class="btn btn-success btn-sm edit-input d-none"
                                onclick="submitUpdate(@user.IdUser)">
                            Guardar
                        </button>

                        <button class="btn btn-secondary btn-sm edit-input d-none"
                                onclick="cancelEdit(@user.IdUser)">
                            Cancelar
                        </button>
                    </td>
                </tr>


            }
        </tbody>


    </table>
}
else
{
    <div class="alert alert-info">No se encontraron usuarios.</div>
}

<nav aria-label="Paginación" class="mt-4">
    <ul class="pagination justify-content-center">
        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Search", new { page = Model.CurrentPage - 1 })">Anterior</a>
        </li>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                <a class="page-link" href="@Url.Action("Search", new { page = i })">@i</a>
            </li>
        }

        <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
            <a class="page-link" href="@Url.Action("Search", new { page = Model.CurrentPage + 1 })">Siguiente</a>
        </li>
    </ul>
</nav>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        function enableEdit(id) {
            document.querySelectorAll(`#row-${id} .edit-input`).forEach(el => el.classList.remove('d-none'));
            document.querySelectorAll(`#row-${id} .display-span`).forEach(el => el.classList.add('d-none'));
            document.getElementById(`btn-edit-${id}`).classList.add('d-none');
            document.getElementById(`btn-delete-${id}`).classList.add('d-none');
        }

        function cancelEdit(id) {
            document.querySelectorAll(`#row-${id} .edit-input`).forEach(el => el.classList.add('d-none'));
            document.querySelectorAll(`#row-${id} .display-span`).forEach(el => el.classList.remove('d-none'));
            document.getElementById(`btn-edit-${id}`).classList.remove('d-none');
            document.getElementById(`btn-delete-${id}`).classList.remove('d-none');
        }

        function confirmDelete(id) {
            Swal.fire({
                title: '¿Deseas eliminar este usuario?',
                text: "Esta acción no se puede deshacer.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/User/Delete?userId=${id}`, { method: 'DELETE' })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire('¡Eliminado!', 'Usuario eliminado con éxito.', 'success')
                                    .then(() => window.location.href = data.redirectUrl);
                            } else {
                                Swal.fire('Error', 'No se pudo eliminar.', 'error');
                            }
                        })
                        .catch(error => {
                            Swal.fire('Error', 'Error inesperado: ' + error, 'error');
                        });
                }
            });
        }

        function submitUpdate(id) {
            Swal.fire({
                title: '¿Guardar cambios?',
                text: 'Confirma que los datos son correctos.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sí, guardar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    const name = document.getElementById(`input-name-${id}`).value;
                    const birth = document.getElementById(`input-birth-${id}`).value;
                    const genderSelect = document.getElementById(`select-gender-${id}`);
                    const genderId = parseInt(genderSelect.value);
                    const genderText = genderSelect.options[genderSelect.selectedIndex]?.text ?? "Sin género";

                    if (isNaN(genderId)) {
                        Swal.fire('Atención', 'Seleccione un género válido.', 'warning');
                        return;
                    }

                    const user = {
                        IdUser: id,
                        NameUser: name,
                        BirthDate: birth,
                        GenderId: genderId
                    };

                    fetch('/User/Update', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(user)
                    })
                    .then(response => {
                        if (response.ok) {
                            document.getElementById(`span-name-${id}`).innerText = name;
                            document.getElementById(`span-birth-${id}`).innerText = birth;
                            document.getElementById(`span-gender-${id}`).innerText = genderText;
                            document.getElementById(`span-gender-${id}`).setAttribute('data-gender-id', genderId);

                            cancelEdit(id);

                            Swal.fire('¡Actualizado!', 'Los cambios han sido guardados.', 'success');
                        } else {
                            response.text().then(text => Swal.fire('Error', text, 'error'));
                        }
                    })
                    .catch(error => Swal.fire('Error', 'Ocurrió un error: ' + error, 'error'));
                }
            });
        }
    </script>
}
